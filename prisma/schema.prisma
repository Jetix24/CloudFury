// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URI")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String?
  email     String?   @unique
  emailVerified DateTime?
  image     String?
  bornDate  DateTime?
  hashedPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relation
  conversationIds String[] @db.ObjectId
  conversations Conversation[] @relation(fields: [conversationIds], references: [id]) //Se va a relacionar con el campo conversationsIds de la colección Conversations

  seenMessageIds String[] @db.ObjectId
  seenMessages Message[] @relation("Seen", fields: [seenMessageIds], references: [id]) //Se va a relacionar con el campo seenMessageIds de la colección Messages

  accounts Account[]
  messages Message[]
}

//Se define el modelo de Account
model Account {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  type      String
  provider  String
  providerAccountId String
  refresh_token String? @db.String
  access_token String? @db.String
  expires_at Int?
  token_type String?
  scope String?
  id_token String? @db.String
  session_state String?

  //Se usa el modelo User para relacionar la cuenta con el usuario
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId]) //Se crea un índice único para los campos provider y providerAccountId
}

//Se define el modelo de Conversation
model Conversation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  lastMessage DateTime @default(now())
  name      String?
  isGroup   Boolean?

  messageIds String[] @db.ObjectId
  messages Message[]

  userIds String[] @db.ObjectId
  users User[] @relation(fields: [userIds], references: [id]) //Se va a relacionar con el campo userIds de la colección User
 
}

//Se define el modelo de Messages
model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())
  
  seenIds String[] @db.ObjectId
  seen User[] @relation("Seen", fields: [seenIds], references: [id]) //Se va a relacionar con el campo seenIds de la colección User

  //Se usa el modelo Conversation para relacionar el mensaje con la conversación
  conversationId String @db.ObjectId
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender User @relation(fields: [senderId], references: [id]) //Se va a relacionar con el campo senderId de la colección User
}
